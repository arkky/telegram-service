import logging
import json
from datetime import datetime

from sql_commands import Postgres
from misc import save_text

from aiogram import Bot, Dispatcher, executor, types

# save_text() # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
# exit()

with open("tokens.json", "r") as f:
    API_TOKEN = json.load(f)['telegram']

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Set variables with texts, buttons and json
text_buttons = [
        "Parsers üöÄ",
        "FAQ üóí",
        "Profile üëî",
        "Language üéÉ",
        "Terms of Use üìò",
        "Support üÜò",
        "About service ü¶æ",
    ]
with open("text.json", "rb") as f:
    texts = json.load(f)

language_flag = 'Russian'
language_text = {'Russian': texts['russian'], 'English': texts['english']}

users = {} # add logic to db with users UI 

#connect to db postgres
sql = Postgres()


# –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start + –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∂–º—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callbacker'–æ–º (dp.callback_query_hanlder)
# @dp.message_handler(commands='start')
# async def start_cmd_handler(message: types.Message):
#     buttons = [types.InlineKeyboardButton(f"Option: {x}", callback_data=x) for x in range(1, 4)]
#     keyboard_markup = types.InlineKeyboardMarkup(row_width=3)
#     keyboard_markup.add(buttons[0], buttons[1], buttons[2])

#     await message.answer("Hi!\nDo you like aiogram?", reply_markup=keyboard_markup)


# –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –≤ –±–æ—Ç–µ
# @dp.message_handler(commands="button")
# async def button(message: types.Message):
#     keyboard_markup = types.ReplyKeyboardMarkup(row_width=3)

#     text_buttons = [
#         "parsers",
#         "faq",
#         "help",
#         "language",
#         "terms of use",
#         "support",
#         "profile",
#     ]

#     keyboard_markup.add(*(types.KeyboardButton(text) for text in text_buttons))

#     await message.answer("Choose option", reply_markup=keyboard_markup)


# –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# @dp.message_handler()
# async def all_msg_handler(message: types.Message):
#     # pressing of a KeyboardButton is the same as sending the regular message with the same text
#     # so, to handle the responses from the keyboard, we need to use a message_handler
#     # in real bot, it's better to define message_handler(text="...") for each button
#     # but here for the simplicity only one handler is defined

#     button_text = message.text
#     logger.debug('The answer is %r', button_text)  # print the text we've got

#     if button_text == 'Yes!':
#         reply_text = "That's great"
#     elif button_text == 'No!':
#         reply_text = "Oh no! Why?"
#     else:
#         reply_text = "Keep calm...Everything is fine"

#     await message.answer(reply_text)
#     # with message, we send types.ReplyKeyboardRemove() to hide the keyboard


@dp.message_handler(commands="start")
async def start(message: types.Message):
    buttons = [types.KeyboardButton(x) for x in text_buttons]
    keyboard_markup = types.ReplyKeyboardMarkup(row_width=3)
    keyboard_markup.add(*buttons)

    flag = sql.check_id(message.from_user.id)
    if not flag:
        sql.start_insert(message)
    
    await message.answer("Welcome!", reply_markup=keyboard_markup)


@dp.message_handler(text="Parsers üöÄ")
async def parsers(message: types.Message):
    language = sql.get_language(message.from_user.id)
    text = language_text[language]['parsers']
    await message.answer(text)


@dp.message_handler(text="FAQ üóí")
async def faq(message: types.Message):
    language = sql.get_language(message.from_user.id)
    text = language_text[language]['faq']
    await message.answer(text)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(text="Profile üëî")
async def profile(message: types.Message):
    language = sql.get_language(message.from_user.id)
    data = sql.get_profile_info(message.from_user.id)
    text = language_text[language]['profile'].format(*data, message.from_user.id)

    button = types.InlineKeyboardButton(language_text[language]['top_up_balance'], callback_data="top_up_balance")
    inline_markup = types.InlineKeyboardMarkup(row_width=1)
    inline_markup.add(button)

    await message.answer(text, reply_markup=inline_markup)


@dp.callback_query_handler(text="top_up_balance", state="*")
async def top_up_balance(query: types.CallbackQuery):
    language = sql.get_language(query.from_user.id)
    text = language_text[language]['dddd'] # –≤–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ç–∏–∑–µ—Ä–∞—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å
    
    await bot.send_message(query.from_user.id, text)
    await 


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# @dp.message_handler(text="Help")
# async def help(message: types.Message):
#     text = """
#         –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–º–æ—â—å —Å —Å–µ—Ä–≤–∏—Å–æ–º, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–∞–ø–ø–æ—Ä—Ç–æ–º: @loh_pidr
#     """
#     await message.answer(text)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# block with language logic


@dp.message_handler(text="Language üéÉ")
async def language(message: types.Message):
    # —Ç—É—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω, –≥–¥–µ –Ω–∞ –≤—ã–±–æ—Ä –±—É–¥–µ—Ç Russian | English

    russian = types.InlineKeyboardButton("Russian üá∑üá∫", callback_data="Russian")
    english = types.InlineKeyboardButton("English üá∫üá∏", callback_data="English")

    inline_markup = types.InlineKeyboardMarkup(row_width=1)
    inline_markup.add(russian, english)

    language = sql.get_language(message.from_user.id)

    if "Russian" == language:
        text = "–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?"
    elif "English" == language:
        text = "What the language do you want?"
    else:
        text = "–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?"

    await message.answer(text, reply_markup=inline_markup)


@dp.callback_query_handler(text=["Russian", "English"])
async def change_language(query: types.CallbackQuery):
    answer = query.data
    sql.change_language(query.from_user.id, language=answer)
    
    if "Russian" == answer:
        text = f"–ü–æ–º–µ–Ω—è–ª–∏ –Ω–∞ {answer}"
    elif "English" == answer:
        text = f"Changed to {answer}"
    else:
        text = f"–ü–æ–º–µ–Ω—è–ª–∏ –Ω–∞ {answer}"

    await bot.send_message(query.from_user.id, text)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(text="Terms of Use üìò")
async def terms_of_use(message: types.Message):
    language = sql.get_language(message.from_user.id)
    text = language_text[language]['terms_of_use']
    await message.answer(text)


@dp.message_handler(text="Support üÜò")
async def support(message: types.Message):
    language = sql.get_language(message.from_user.id)
    text = language_text[language]['support']
    await message.answer(text)


@dp.message_handler(text="About service ü¶æ")
async def about_service(message: types.Message):
    language = sql.get_language(message.from_user.id)
    text = language_text[language]['about_service']
    await message.answer(text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
